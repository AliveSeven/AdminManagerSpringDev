package ${package.Controller};

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import java.util.List;
##import org.springframework.web.bind.annotation.RequestMapping;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

        @Resource
        private ${table.serviceName} i${table.entityPath}Service;

        @Resource
        private IRedisService iRedisService;

        // 新增或者更新
        @PostMapping("/save")
        public Result save(@RequestBody ${entity} ${table.entityPath}) {
                return Result.success(i${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
        }

        // 根据id，删除数据
        @PostMapping("/delete")
        public Result deleteById(@RequestParam Integer id) {
                return Result.success(i${table.entityPath}Service.removeById(id));
        }

        // 批量删除
        @PostMapping("/delete/batch")
        public Result deleteBatch(@RequestBody List<Integer> ids) {
                return Result.success(i${table.entityPath}Service.removeByIds(ids));
        }

        // 使用get方法时，返回查询的role表的全部数据
        @GetMapping
        public Result findAll() {
                return Result.success(i${table.entityPath}Service.list());
        }

        // 根据id、查询返回数据
        @GetMapping("/{id}")
        public Result findOne(@PathVariable Integer id) {
                return Result.success(i${table.entityPath}Service.getById(id));
        }

        // 分页查询
        @GetMapping("/page")
        public Result findPage(@RequestParam("pageNum") Integer pageNum,
        @RequestParam("pageSize") Integer pageSize,
        @RequestParam(value = "name", required = false) String name) {
                IPage<${entity}> page = new Page<>(pageNum , pageSize);
                QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
                queryWrapper.like(!Strings.isEmpty(name),"name" , name);

                return Result.success(i${table.entityPath}Service.page(page , queryWrapper));
        }


}

#end